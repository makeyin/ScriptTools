# ansible-playbook geneNodePB.yml -i genesis_host -e @baseDeployConf.yml
---  
- hosts: all
  gather_facts: no
  #strategy: free
  remote_user: "{{ minerUser }}"
  become_user: "{{ minerUser }}"
  vars:
  - startNodeTryMaxNum: 60
  - startNodeTryInterval: 10
  - createMinerTryMaxNum: 60
  - createMinerTryInterval: 10
  - sectorSize: 34359738368
  - genesisPeerID: "sample"
  - downloadGenesisFileUrl: "sample"
  - tapUrl: "sample"
  tasks:
    - name: 复制view_lotus.sh
      copy:
        force: true
        dest: "~/bin/view_lotus.sh"
        src: "../script/view_lotus.sh"
        mode: 0750
        owner: "{{ minerUser }}"

    - name: "删除旧的bin文件和文件夹"
      ignore_errors: True
      remote_user: "{{ minerUser }}"
      become_user: "{{ minerUser }}"
      shell: "~/bin/view_lotus.sh stopall; ~/bin/view_lotus.sh cleanEnv; rm -f ~/bin/devnet.car"

    - name: "下载tar文件"
      get_url:
        url: "{{ downloadGenesisBinUrl }}"
        dest: "~/bin/lotus_private.tar"

    - name: 下载devnet.car
      get_url:
        url: "{{ downloadGenesisFileUrl }}"
        dest: "~/bin/devnet.car"

    - name: "解压tar"
      shell: "cd ~/bin; tar xvf lotus_private.tar; rm -f fountain lotus-seed lotus-shed"

    - name: 启动lotus daemon-私网
      ignore_errors: True
      shell: setsid ~/bin/lotus daemon  --bootstrap=false --genesis=/home/$USER/bin/devnet.car  > ~/log/lotus.`date +"%m%d%H%M"`.out 2>&1 &

    - name: 等待节点启动
      shell: ~/bin/lotus net id
      ignore_errors: True
      register: hasRunning
      until: "'API not running' not in hasRunning.stderr"
      retries: "{{startNodeTryMaxNum}}"
      delay: "{{startNodeTryInterval}}"

    - name: Private Net swarm connect genesisPeerID
      shell: ~/bin/lotus net connect {{ genesisPeerID }}

    - name: 如果没有钱包地址生成钱包地址
      shell: ~/bin/lotus wallet new bls
      register: walletID

    - name: debug walletID
      debug:
        msg: "{{walletID}}"

    - name: 水龙头
      shell: curl -i -X POST -D 300.txt -d "address={{walletID.stdout}}&sectorSize={{sectorSize}}" "{{tapUrl}}/mkminer"
      register: mkMinerResult

    - name: 查看水龙头的返回
      debug:
        msg: "{{mkMinerResult}}.stdout_lines"

    - name: 等待包获取余额
      shell: ~/bin/view_lotus.sh wallet
      ignore_errors: True
      register: walletBalance
      until: walletBalance.stdout != "0"
      retries: "{{createMinerTryMaxNum}}"
      delay: "{{createMinerTryInterval}}"

    - name: 继续curl
      shell: cat 300.txt |grep Location |awk -F "f=" '{print $2}'|awk -F "&m" '{print $1}' > pid.txt
      register: cat

    - name: cat的返回
      debug:
        msg: "{{cat}}.stdout"

    - name: 继续curl
      shell: curl "{{tapUrl}}"/msgwaitaddr?cid=`cat pid.txt` >400.txt
      register: curl1

    - name: curl1的返回
      debug:
        msg: "{{curl1}}.stdout"

    - name: curl结果
      shell: cat 400.txt|awk -F ":" '{print $2}'|awk -F "}" '{print $1}' >500.txt
      register: curl2

    - name: curl2的返回
      debug:
        msg: "{{curl2}}.stdout"

    - name: 是否
      shell: cat 500.txt |sed 's/ //g'
      register: id
      until: id.stdout.find("t") != -1
      retries: "{{createMinerTryMaxNum}}"
      delay: "{{createMinerTryInterval}}"

    - name: id的返回
      debug:
        msg: "{{id}}.stdout"

    - name: 初始化storage miner
      shell: ~/bin/lotus-storage-miner init --actor={{ id.stdout }} --owner={{ walletID.stdout }}
      register: init

    - name: 启动storage节点
      shell: ~/bin/view_lotus.sh mining

    - name: 等待storage节点启动完成
      shell: ~/bin/lotus-storage-miner net id
      ignore_errors: True
      register: hasStorageRunning
      until: "'API not running' not in hasStorageRunning.stderr"
      retries: "{{createMinerTryMaxNum}}"
      delay: "{{createMinerTryInterval}}"

    - name: 给它发一个算力
      shell: "~/bin/lotus-storage-miner pledge-sector"
      register: masterId